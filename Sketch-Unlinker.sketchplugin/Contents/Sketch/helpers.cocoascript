var helpers = {
  "displayUnlinkSelection": function() {
    var accessoryView = NSView.alloc().initWithFrame(NSMakeRect(0.0, 0.0, 200.0, 90.0))

    var buttonStates = [1, 1, 1, 0]

    var buttonOne = NSButton.alloc().initWithFrame(NSMakeRect(0.0, 70.0, 200.0, 20.0))
    buttonOne.setButtonType(NSSwitchButton)
    buttonOne.setTitle("Symbols")
    buttonOne.setState(NSOnState)
    buttonOne.setCOSJSTargetFunction(function(sender){
      buttonStates[0] = buttonStates[0] == 0 ? 1 : 0
    })
    accessoryView.addSubview(buttonOne)

    var buttonTwo = NSButton.alloc().initWithFrame(NSMakeRect(0.0, 50.0, 200.0, 20.0))
    buttonTwo.setButtonType(NSSwitchButton)
    buttonTwo.setTitle("Styles")
    buttonTwo.setState(NSOnState)
    buttonTwo.setCOSJSTargetFunction(function(sender){
      buttonStates[1] = buttonStates[1] == 0 ? 1 : 0
    })
    accessoryView.addSubview(buttonTwo)

    var buttonThree = NSButton.alloc().initWithFrame(NSMakeRect(0.0, 30.0, 200.0, 20.0))
    buttonThree.setButtonType(NSSwitchButton)
    buttonThree.setTitle("Text styles")
    buttonThree.setState(NSOnState)
    buttonThree.setCOSJSTargetFunction(function(sender){
      buttonStates[2] = buttonStates[2] == 0 ? 1 : 0
    })
    accessoryView.addSubview(buttonThree)

    var buttonFour = NSButton.alloc().initWithFrame(NSMakeRect(0.0, 0.0, 200.0, 20.0))
    buttonFour.setButtonType(NSSwitchButton)
    buttonFour.setTitle("Include elements inside groups")
    buttonFour.setState(NSOffState)
    buttonFour.setCOSJSTargetFunction(function(sender){
      buttonStates[3] = buttonStates[3] == 0 ? 1 : 0
    })
    accessoryView.addSubview(buttonFour)

    var alert = NSAlert.alloc().init()
    alert.messageText = "What do you want to unlink\nfrom the selection?"
    alert.addButtonWithTitle("Unlink")
    alert.addButtonWithTitle("Cancel")
    alert.setAccessoryView(accessoryView)

    var responseCode = alert.runModal()

    return [responseCode, buttonStates]
  },
  "removeSharedStyles": function(styles, selectedStyles) {
    var removedCount = 0

    var numberOfSelectedStyles = Object.keys(selectedStyles).length

    for (var i = 0; i < numberOfSelectedStyles; i++) {
      for (var j = 0; j < styles.numberOfSharedObjects(); j++) {
        var sharedObject = styles.sharedObjectAtIndex(j)
        for (var k = 0; k < sharedObject.instances().count(); k++) {
          var sharedObjectInstance = sharedObject.instances().objectAtIndex(k)
          var objectID = sharedObjectInstance.UTF8String()
          if (selectedStyles.hasOwnProperty(objectID)) {
            var instance = selectedStyles[objectID]
            sharedObject.unregisterInstance(instance)
            removedCount += 1
          }
        }
      }
    }

    return removedCount
  },
  "getStylesForSelection": function(selection, includeGroupElements, selectedStyles) {
    for (var i = 0; i < selection.count(); i++) {
      var item = selection[i] || selection.objectAtIndex(i)
      var isArtboard = item.isKindOfClass(MSArtboardGroup.class())
      var isGroup = item.isKindOfClass(MSLayerGroup.class())

      if (isArtboard || (isGroup && includeGroupElements)) {
        helpers.getStylesForSelection(item.layers(), includeGroupElements, selectedStyles)
      }
      if (item.isKindOfClass(MSLayer.class())) {
        helpers.getStylesForLayer(item, selectedStyles)
      }
    }
  },
  "getStylesForLayer": function(layer, selectedStyles) {
    if (layer.isKindOfClass(MSLayerGroup.class())) { // If the layer is a symbol
      selectedStyles[layer.objectID()] = layer
    }

    if (layer.respondsToSelector("style")) { // If the layer has a style
      var style = layer.style()
      selectedStyles[style.objectID()] = style
    }
  }
};
