// (shift cmd u)
//
// Copyright (c) 2015 Eivind Rannem Bohler
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

function main() {
  var currentArtboard = doc.currentPage().currentArtboard()
  if (currentArtboard == nil) {
    doc.showMessage("Please select an artboard")
    return
  }

  var artboardChildren = getAllArtboardChildren(currentArtboard)

  var response = displayUnlinkSelectionForArtboard(currentArtboard)

  var shouldCancel = response[0] == 1001
  if (shouldCancel) {
    return
  }

  var stylesToRemove = response[1]

  var infoText = "Removed "
  var removalText = ""

  if (stylesToRemove[0] == 1) {
    var sharedSymbols = doc.documentData().layerSymbols()
    var numberOfRemovedSymbols = removeSharedStyles(sharedSymbols, artboardChildren)
    removalText += numberOfRemovedSymbols + " symbol" + (numberOfRemovedSymbols != 1 ? "s" : "")
  }

  if (stylesToRemove[1] == 1) {
    var sharedStyles = doc.documentData().layerStyles()
    var numberOfRemovedStyles = removeSharedStyles(sharedStyles, artboardChildren)
    removalText += (removalText.length > 0 ? ", " : "") + numberOfRemovedStyles + " style" + (numberOfRemovedStyles != 1 ? "s" : "")
  }

  if (stylesToRemove[2] == 1) {
    var sharedTextStyles = doc.documentData().layerTextStyles()
    var numberOfRemovedTextStyles = removeSharedStyles(sharedTextStyles, artboardChildren)
    removalText += (removalText.length > 0 ? ", " : "") + numberOfRemovedTextStyles + " text style" + (numberOfRemovedTextStyles != 1 ? "s" : "")
  }

  infoText += removalText + "."

  log(infoText)
  doc.showMessage(infoText)
}

function displayUnlinkSelectionForArtboard(artboard) {
  var accessoryView = NSView.alloc().initWithFrame(NSMakeRect(0.0, 0.0, 300.0, 60.0))

  var buttonStates = [1, 1, 1]

  var buttonOne = NSButton.alloc().initWithFrame(NSMakeRect(0.0, 40.0, 100.0, 20.0))
  buttonOne.setButtonType(NSSwitchButton)
  buttonOne.setTitle("Symbols")
  buttonOne.setState(NSOnState)
  buttonOne.setCOSJSTargetFunction(function(sender){
    buttonStates[0] = buttonStates[0] == 0 ? 1 : 0
  })
  accessoryView.addSubview(buttonOne)

  var buttonTwo = NSButton.alloc().initWithFrame(NSMakeRect(0.0, 20.0, 100.0, 20.0))
  buttonTwo.setButtonType(NSSwitchButton)
  buttonTwo.setTitle("Styles")
  buttonTwo.setState(NSOnState)
  buttonTwo.setCOSJSTargetFunction(function(sender){
    buttonStates[1] = buttonStates[1] == 0 ? 1 : 0
  })
  accessoryView.addSubview(buttonTwo)

  var buttonThree = NSButton.alloc().initWithFrame(NSMakeRect(0.0, 0.0, 100.0, 20.0))
  buttonThree.setButtonType(NSSwitchButton)
  buttonThree.setTitle("Text styles")
  buttonThree.setState(NSOnState)
  buttonThree.setCOSJSTargetFunction(function(sender){
    buttonStates[2] = buttonStates[2] == 0 ? 1 : 0
  })
  accessoryView.addSubview(buttonThree)

  var alert = NSAlert.alloc().init()
  alert.messageText = "What do you want to unlink from artboard\n\"" + artboard.name() + "\"?"
  alert.addButtonWithTitle("Unlink")
  alert.addButtonWithTitle("Cancel")
  alert.setAccessoryView(accessoryView)

  var responseCode = alert.runModal()

  return [responseCode, buttonStates]
}

function removeSharedStyles(styles, artboardChildren) {
  var removedCount = 0

  for (var i = 0; i < styles.numberOfSharedObjects(); i++) {
    var sharedObject = styles.sharedObjectAtIndex(i)
    for (var j = 0; j < sharedObject.instances().count(); j++) {
      var sharedObjectInstance = sharedObject.instances().objectAtIndex(j)
      var objectID = sharedObjectInstance.UTF8String()
      if (artboardChildren.hasOwnProperty(objectID)) {
        var instance = artboardChildren[objectID]
        sharedObject.unregisterInstance(instance)
        removedCount += 1
      }
    }
  }

  return removedCount
}

function getAllArtboardChildren(artboard) {
  var result = new Object()

  for (var i = 0; i < artboard.children().count(); i++) {
    var layer = artboard.children().objectAtIndex(i)
    if (layer.isKindOfClass(MSLayerGroup.class())) { // If the layer is a symbol
      result[layer.objectID()] = layer
    }

    if (layer.respondsToSelector("style")) { // If the layer has a style
      var style = layer.style()
      result[style.objectID()] = style
    }
  }

  return result
}

main()
